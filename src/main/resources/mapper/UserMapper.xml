<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lin.mapper.UserMapper">
	
	<!-- 过滤查询人员 zhangweijie -->
	<select id="selectUserByFilter" parameterType="java.util.HashMap"
		resultType="com.lin.domain.User">
		select 
		t.user_id userID,
		t.user_name userName,
		t.provinceid provinceID,
		t.phone phone,
		t.email email,
		t.address address,
		t.dep_id organizationID,
		decode(n.portrait_url,'',t.portrait_url,n.portrait_url) userPic,
		to_char(t.update_date,'yyyy-mm-dd hh24:mi:ss') updateDate,
		t.status type,
		t.dep_id organizationID,
		t.USERWORK context,
		t.USERTERRITORY field,
		p.pos_name post,
		t.position_type deptype,
		t.quanpin quanPin,
		t.shouzimu shouZiMu,
		t.hytaccount hytAccount,
		t.crmaccount crmAccount,
		t.flagonline flagOnline,
		t.sort_num sortNum,
		t.order_num orderNum,
		n.install
		from appuser.address_user t
		left join appuser.address_position p
		on (t.pos_id = p.pos_id)
		left join appuser.address_user_new n
    	on n.user_id = t.user_id
		<if test="groupID !='' and groupID !=null and groupID !='5002'">
			left join appuser.address_group_user ug on (t.user_id=ug.group_user) 
		</if>
		<if test="fields !='' and fields !=null">
			left join (select count(1) cou,ut.user_id 
		    from appuser.address_user_territory ut where ut.ter_id in (${fields})
		    group by ut.user_id) tut
		    on tut.user_id = t.user_id
		</if>
		<if test="groupID !=null and groupID != '' and groupID=='5002'">
			left join appuser.address_organization org on (t.provinceid=org.organ_id)
		</if>
		where 1=1
		and  not  exists   
   		 (select 1 from appuser.address_blacklist a    
     		  where  a.user_id = t.user_id  )
		<if test="fields !='' and fields !=null">
			and tut.cou &gt; 0
		</if>
		<if test="groupID !='' and groupID !=null and groupID !='5002'">
			and ug.group_id=#{groupID}
		</if>
		<if test="groupID=='5002'">
			and t.dep_id in (
				select aon.organ_id
				  from appuser.address_organization aon
				 where aon.organ_name = '部门领导'
				 start with aon.pid in
				            (select o1.organ_id
				               from appuser.address_organization o1
				              where o1.pid in (select o.organ_id
				                                 from appuser.address_organization o
				                                 where  o.organ_name = '省公司')
				                and (o1.organ_name like '%政企部%' or
				                    o1.organ_name like '%政企客户部%'))
				connect by prior aon.organ_id = aon.pid 
				)
				and p.pos_name = '政企领导'
		</if>
		
		<if test="search !='' and search !=null">
			and (t.user_name like '${search}%' or t.phone like '${search}%' or t.quanpin like '${search}%')
		</if>
		<if test="organizationID !='' and organizationID !=null">
			and t.dep_id=#{organizationID}
		</if>
		<if test="provinceID !='' and provinceID !=null">
			and t.provinceid in (${provinceID})
		</if>
		
		<choose>
	        <when test="groupID !=null and groupID != '' and groupID=='5002'">
              order by nlssort(org.organ_name, 'NLS_SORT=SCHINESE_PINYIN_M'),t.quanpin 
	        </when>
	        <otherwise>
	            order by t.sort_num,t.order_num
	        </otherwise>
    	</choose>
		
	</select>

	<!-- 根据时间查询 查找大于此时间的数据  zhangweijie-->
	<select id="getNewDateByUpdateTime" parameterType="com.lin.domain.User"
		resultType="com.lin.domain.User">
		
		select t.user_id userID,
		t.user_name userName,
		t.provinceid provinceID,
		t.phone phone,
		t.email email,
		t.address address,
		t.dep_id organizationID,
		decode(n.portrait_url,'',t.portrait_url,n.portrait_url) userPic,
		to_char(t.update_date,'yyyy-mm-dd hh24:mi:ss') updateDate,
		t.status type,
		t.dep_id organizationID,
		t.USERWORK context,
		t.USERTERRITORY field,
		p.pos_name post,
		t.position_type deptype,
		t.quanpin quanPin,
		t.shouzimu shouZiMu,
		t.hytaccount hytAccount,
		t.crmaccount crmAccount,
		t.flagonline flagOnline,
		t.sort_num sortNum,
		t.order_num orderNum,
		t.install
		from appuser.address_user t
		left join appuser.address_position p
		on (t.pos_id = p.pos_id)
		left join appuser.address_user_new n
    	on n.user_id = t.user_id
		where t.update_date &gt; 
			to_date('${context}','yyyy-mm-dd hh24:mi:ss') 
		 and not exists (
	        select 1 from appuser.address_blacklist bt
	        where bt.user_id = t.user_id
	        <if test="context != '2008-08-08 12:13:14'">
		      	and bt.create_date &lt; to_date('${context}', 'yyyy-mm-dd hh24:mi:ss')
		    </if> 
	        )
	    <if test="context == '2008-08-08 12:13:14'">
	      	and t.status != '3'
	    </if>   
	   <!--  and t.provinceid = '1944640' -->
		order by t.sort_num,t.order_num
	</select>
	<select id="getuserupdateById" parameterType="java.lang.String"
		resultType="com.lin.domain.User">
		select t.user_id userID,
		t.user_name userName,
		t.provinceid provinceID,
		t.phone phone,
		t.email email,
		t.address address,
		t.dep_id organizationID,
		decode(n.portrait_url,'',t.portrait_url,n.portrait_url) userPic,
		to_char(t.update_date,'yyyy-mm-dd hh24:mi:ss') updateDate,
		t.status type,
		t.dep_id organizationID,
		tw.work_name context,
		tt.field field,
		p.pos_name post,
		t.position_type deptype,
		t.quanpin quanPin,
		t.shouzimu shouZiMu,
		t.hytaccount hytAccount,
		t.crmaccount crmAccount,
		t.flagonline flagOnline,
		t.sort_num sortNum,
		t.order_num orderNum,
		t.install
		from appuser.address_user t
		left join appuser.address_position p
		on (t.pos_id = p.pos_id)
		left join appuser.address_user_new n
    	on n.user_id = t.user_id
		left join (select w.user_id, wm_concat(co.work_name) work_name
		from appuser.address_user_work w
		left join appuser.address_work_content co
		on (w.work_id = co.work_id)
		group by w.user_id) tw
		on tw.user_id = t.user_id
		left join (select te.user_id, wm_concat(tee.ter_name) field
		from appuser.address_user_territory te
		left join appuser.address_territory tee
		on (te.ter_id = tee.ter_id)
		group by te.user_id) tt
		on tt.user_id = t.user_id
		where t.user_id = #{0}
		
	</select>

	
	

	<resultMap id="UserDetailsResl" type="com.lin.domain.UserDetails">
		<result property="userID" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="userPic" column="portrait_url" />
		<result property="organizationID" column="DEP_ID" />
		<result property="organizationName" column="dep_name" />
		<result property="postID" column="POS_ID" />
		<result property="PostName" column="pos_name" />
		<result property="phone" column="phone" />
		<result property="email" column="email" />
		<result property="address" column="address" />
		<result property="contexts" column="userWork" />
		<result property="fields" column="userTerritory" />
		<result property="install" column="install" />

	</resultMap>
	<!-- 个人资料详情 hzh -->
	<select id="SelectUserDetails" parameterType="java.lang.String"
		resultMap="UserDetailsResl">
		select t.user_id,
		t.user_name,
		decode(n.portrait_url,'',t.portrait_url,n.portrait_url) portrait_url,
		t.DEP_ID,
		ad.organ_name dep_name,
		ap.pos_name,
		t.POS_ID,
		t.phone,
		t.email,
		t.address,
		t.userwork userWork,
		t.userterritory userTerritory,
		t.install
		from appuser.address_user t
		left join appuser.address_organization ad
		on ad.organ_id = t.dep_id
		left join appuser.address_position ap
		on ap.pos_id = t.pos_id
		left join appuser.address_user_new n
      	on n.user_id = t.user_id
		where t.user_id = '${_parameter}'
	</select>

	<resultMap id="ContextVoResl" type="com.lin.domain.ContextVo">
		<result property="contextID" column="work_id" />
		<result property="context" column="work_name" />
		<result property="flag" column="flag" />
	</resultMap>
	<!-- 个人资料详情 工作内容 hzh -->
	<select id="selectContextList" parameterType="java.lang.String"
		resultMap="ContextVoResl">
  select ac.work_id, ac.work_name, decode(t.wid, '', '2', '1') flag
  from appuser.address_work_content ac
  left join (select ac.work_id wid
               from appuser.address_work_content ac
               left join appuser.address_user_work aw
                 on aw.work_id = ac.work_id
              where aw.user_id = '${_parameter}') t
    on t.wid = ac.work_id
	</select>

	<resultMap id="FieldVoResl" type="com.lin.domain.FieldVo">
		<result property="fieldID" column="ter_id" />
		<result property="field" column="ter_name" />
		<result property="flag" column="flag" />
	</resultMap>
	<!-- 个人资料详情 擅长领域 hzh -->
	<select id="selectFieldList" parameterType="java.lang.String"
		resultMap="FieldVoResl">
		select tu.ter_id, tu.ter_name, decode(t.wid, '', '2', '1') flag
  		from appuser.address_territory tu
 		 left join (select t.ter_id  wid	     
	            	from appuser.address_territory t
		            left join appuser.address_user_territory atu
	              	on atu.ter_id = t.ter_id
		             where atu.user_id = '${_parameter}') t
    on t.wid = tu.ter_id
	</select>
	<!--个人资料修改保存  -->
	<update id="updateAddUser" parameterType="com.lin.domain.UserDetails">
    update  appuser.address_user au
    <set>
      au.DEP_ID = '${organizationID}',
      au.pos_id = '${postID}',
      au.phone = '${phone}',
      au.email = '${email}',
      au.address = '${address}',
      au.POSITION_TYPE = '${rowId}',
      au.USERWORK = '${contexts}',
      au.USERTERRITORY = '${fields}',
      au.update_date = sysdate,
      <if test="typpe == ''  or typpe == null  or typpe == 2 ">
      au.status= '2'
      </if>
      <if test="typpe == 1">
      	au.status= '3'
      </if>
      
    </set>
    where au.user_id = '${userID}'
	</update>
	<!--个人资料修改保存  -->
	<update id="updateAddUser2" parameterType="com.lin.domain.UserDetails">
    update  appuser.address_user au
    <set>
      <if test="organizationID != null and organizationID != ''">au.DEP_ID = '${organizationID}',</if>
      <if test="postID != null and postID != ''">au.pos_id = '${postID}',</if>
      <if test="phone != null and phone != ''">au.phone = '${phone}',</if>
      <if test="email != null and email != ''">au.email = '${email}',</if>
      <if test="address != null and address != ''">au.address = '${address}',</if>
      <if test="rowId != null and rowId != ''">au.POSITION_TYPE = '${rowId}',</if>
      <if test="contexts != null and contexts != ''">au.USERWORK = '${contexts}',</if>
      <if test="fields != null and fields != ''">au.USERTERRITORY = '${fields}',</if>
      au.update_date = sysdate,
      <if test="typpe == ''  or typpe == null  or typpe == 2 ">
      au.status= '2'
      </if>
      <if test="typpe == 1">
      	au.status= '3'
      </if>
      
    </set>
    where au.user_id = '${userID}'
	</update>
	<!--个人资料修改保存  删除人员的工作内容  -->
	<delete id="deleteContext" parameterType="java.lang.String" >
	delete from appuser.address_user_work  aw where aw.user_id = '${_parameter}'
	</delete>
	<!--个人资料修改保存  删除人员的擅长领域  -->
	<delete id="deleteField" parameterType="java.lang.String" >
	delete from appuser.address_user_territory au where au.user_id = '${_parameter}'
	</delete>
	<!--个人资料修改保存  保存人员工作内容  -->
	<insert id="saveContextById" parameterType="com.lin.domain.ContextVo">
		insert into appuser.address_user_work (row_id,work_id,user_id,create_date)
		 <foreach collection="list" item="item" index="index" open="(" close=")" separator="union all">
		    SELECT #{item.rowId} as a, #{item.contextID} as b, #{item.userID} as c,sysdate as d FROM DUAL
		 </foreach> 
	</insert>
    
    <!--个人资料修改保存  保存人员擅长领域  -->
	<insert id="saveFieldById" parameterType="com.lin.domain.FieldVo">
		insert into appuser.address_user_territory (row_id,ter_id,user_id,create_date)
		 <foreach collection="list" item="item" index="index" open="(" close=")" separator="union all">
		    SELECT #{item.rowId} as a, #{item.fieldID} as b, #{item.userID} as c,sysdate as d FROM DUAL
		 </foreach> 
	</insert>
	
	<!--加入黑名单  -->
	<insert id="insertBlack" parameterType="com.lin.domain.UserDetails">
	  insert into appuser.address_blacklist (row_id,user_id,create_by,create_date)  
	  values  ('${rowId}','${userID}','${loginID}',sysdate)
	</insert>
	
	<!--移除黑名单  -->
	<delete id="deleteBlack" parameterType="java.lang.String">
	delete from appuser.address_blacklist au where au.user_id = '${_parameter}'
	</delete>
	
	<resultMap id="userpowerBean" type="com.lin.domain.UserPower">
		<result property="staffID" column="staff_id" />
		<result property="staffName" column="staff_name" />
		<result property="img" column="pic_url" />
		<result property="orgID" column="org_id" />
		<result property="orgName" column="org_name" />
		<result property="departmentID" column="department_id" />
		<result property="departmentCode" column="department_code" />
		<result property="departmentName" column="department_name" />
		<result property="regionID" column="region_id" />
		<result property="regionName" column="region_name" />
	</resultMap>
	<select id="userPower" parameterType="java.lang.String"
		resultMap="userpowerBean">
		select s.staff_id staff_id,
		       s.staff_name staff_name,
		       s.org_id org_id,
		       jo.org_name org_name,
		       s.department_id department_id,
		       (select o.org_code
		          from jtuser.organization o
		         where o.org_id = s.department_id) department_code,
		       (select o.org_name
		          from jtuser.organization o
		         where o.org_id = s.department_id) department_name,
		       pic.pic_url pic_url,
		       tcr.common_region_id region_id,
		       tcr.region_name region_name
		  from jtuser.staff s
		  left join jtorder.staff_user_pic pic
		    on pic.staff_id = s.staff_id
		  join jtuser.organization jo
		    on s.org_id = jo.org_id
		  left join jtuser.common_region tcr
		    on jo.common_region_id = tcr.common_region_id
		 where s.staff_id = #{_parameter}
	</select>
	
	<resultMap id="privilegeBean" type="com.lin.domain.Privilege">
		<result property="privilegeID" column="row_id" />
		<result property="privilegeCode" column="row_code" />
		<result property="privilegeName" column="row_name" />
	</resultMap>
	<select id="getPrivilege" parameterType="java.lang.String"
		resultMap="privilegeBean">
		select pr.privilege_id row_id,
		       pr.privilege_name row_name,
		       pr.privilege_code row_code
		  from jtuser.privilege pr
		  left join jtuser.staff_limit li
		    on li.privilege_id = pr.privilege_id
		  left join jtuser.system_user s
		    on s.system_user_id = li.system_user_id
		 where s.staff_id = #{_parameter}
	</select>
	<resultMap id="roleBean" type="com.lin.domain.Role">
		<result property="roleID" column="row_id" />
		<result property="roleCode" column="row_code" />
		<result property="roleName" column="row_name" />
	</resultMap>
	<select id="getRole" parameterType="java.lang.String"
		resultMap="roleBean">
		select jr.role_id row_id,
		       jr.role_name row_name,
		       jr.role_code row_code
		  from jtuser.staff_role sr
		  left join jtuser.roles jr
		    on sr.role_id = jr.role_id
		  left join jtuser.system_user s
		    on s.system_user_id = sr.system_user_id
		 where s.staff_id = #{_parameter}
	</select>
	<select id="selectContextsByIds" parameterType="java.util.List" resultType="java.lang.String">
		select work_name
  		from appuser.address_work_content t
 		where t.work_id in 
 		<foreach collection="list" item="item" open="(" separator="," close=")">
 			'${item}'
 		</foreach>
	</select>
	<select id="selectFiledsByIds" parameterType="java.util.List" resultType="java.lang.String">
		select t.ter_name 
		from appuser.address_territory t 
		where t.ter_id in
 		<foreach collection="list" item="item" open="(" separator="," close=")">
 			'${item}'
 		</foreach>
	</select>
	<select id="selectUsersByStaffid" parameterType="java.lang.String" resultType="com.lin.domain.UserOrder">
		<!-- select jt.system_user_id,jt.department_id,jt.order_num  from jtuser.org_staff_order_second jt 
			where jt.department_id =(
					select j.department_id from jtuser.org_staff_order_second j 
						where j.system_user_id =  #{_parameter}) 
			order by jt.order_num -->
		select jt.user_id,jt.dep_id,jt.new_order_num from appuser.address_user jt 
			where jt.dep_id =(
				select j.dep_id from appuser.address_user j 
					where j.user_id = #{_parameter}) 
			order by jt.new_order_num
	</select>
	<update id="updateThisUser" >
		update appuser.address_user jt 
			set jt.new_order_num = #{orderNum} 
			where jt.user_id = #{staffid} 
	</update>
	<select id="selectNewOrderNumByStaffid" parameterType="java.lang.String" resultType="java.lang.Integer">
		select app.new_order_num from appuser.address_user app
			where app.user_id = #{_parameter} 
	</select>
	
</mapper>